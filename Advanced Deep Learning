import keras
keras.__version__

from keras.datasets import imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

train_data[0]

max([max(sequence) for sequence in train_data])

word_index = imdb.get_word_index()
reverse_word_index= dict([(value, key) for (key, value) in word_index.items()])

decoded_review = ' '.join([reverse_word_index.get (i -3, '?') for i in train_data[0]])

decoded_review

import numpy as np

def vectorize_sequences(sequences, dimension = 10000):
  results = np.zeros((len(sequences), dimension))
  for i, sequence in enumerate(sequences):
    results[i, sequence] = 1.
  return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

x_train[0]

y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

from keras import models
from keras import layers

model= models.Sequential()
model.add(layers.Dense(32, activation= 'tanh', input_shape= (10000, )))
model.add(layers.Dense(32, activation= 'tanh'))
model.add(layers.Dense(1, activation = 'sigmoid'))

model.compile(optimizer='rmsprop',
              loss= 'mse',
              metrics=['accuracy'])
              
              from keras import optimizers

model.compile(optimizer=optimizers.RMSprop(),
              loss='mse',
              metrics= ['accuracy'])
              
              from keras import losses
from keras import metrics

model.compile(optimizer=optimizers.RMSprop(lr=0.001),
              loss=losses.mse,
              metrics=['accuracy'])
              
              x_val = x_train[:10000]
partial_x_train = x_train[10000:]

y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(
    partial_x_train,
    partial_y_train,
    epochs= 10,
    batch_size= 500,
    validation_data=(x_val, y_val)
)

history_dict = history.history
history_dict.keys()

import matplotlib.pyplot as plt

loss= history.history['loss']
binary_acc = history.history['accuracy']
val_loss = history.history['val_loss']
val_binary_accuracy= history.history['val_accuracy']

epochs = range(1, len(binary_acc) + 1)

plt.plot(epochs, loss, 'bo', label='Training loss')

plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Train and Validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()
